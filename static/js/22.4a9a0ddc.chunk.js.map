{"version":3,"sources":["reduxd/LoadData.tsx","reduxd/Todo.tsx","reduxd/index.tsx"],"names":["connect","state","music","props","data","pending","dispatch","loading","size","danger","type","onClick","ACTION","FETCH_DATA","payload","bordered","dataSource","renderItem","item","Item","todoId","todo","filter","Search","placeholder","enterButton","onSearch","v","trim","id","text","completed","ADD_TODO","td","filterTodo","TOGGLE_TODO","style","color","cursor","Group","defaultValue","onChange","e","target","value","SWITCH_TODO_FILTER","buttonStyle","Button","Reduxd"],"mappings":"kJA8BA,IAIeA,eAJE,SAACC,GAAD,MAAmB,CAClCC,MAAOD,EAAMC,SAGAF,EA3Bf,SAAkBG,GAAuB,IAAD,EACSA,EAAvCD,MAASE,EADqB,EACrBA,KAAMC,EADe,EACfA,QAAWC,EAAaH,EAAbG,SAIlC,OACE,gCACE,cAAC,IAAD,CACEC,QAASF,EACTG,KAAK,QACLC,QAAM,EACNC,KAAK,UACLC,QAVc,WAClBL,EAAS,CAAEI,KAAME,IAAOC,WAAYC,QAAS,WAI3C,uBAOA,cAAC,IAAD,CACEC,UAAQ,EACRC,WAAYZ,EACZa,WAAY,SAAAC,GAAI,OAAI,cAAC,IAAKC,KAAN,UAAYD,a,kBCjBpCE,EAAS,EA2Db,IAIepB,eAJE,SAACC,GAAD,MAAmB,CAClCoB,KAAMpB,EAAMoB,QAGCrB,EA5Df,SAAcG,GAAmB,IAAD,EACeA,EAArCkB,KAAQjB,EADc,EACdA,KAAMkB,EADQ,EACRA,OAAUhB,EAAaH,EAAbG,SAwBhC,OACE,gCACE,cAAC,IAAMiB,OAAP,CACEC,YAAY,aACZC,YAAY,WACZjB,KAAK,QACLkB,SA7BW,SAACC,GAChB,GAAKA,EAAEC,OAAP,CACA,IAAMP,EAAO,CAAEQ,GAAIT,IAAUU,KAAMH,EAAGI,WAAW,GACjDzB,EAAS,CAAEI,KAAME,IAAOoB,SAAUlB,QAASO,QA4BzC,cAAC,IAAD,CACEN,UAAQ,EACRC,WApBa,SAACM,GAClB,OAAQA,GACN,IAAK,iBACH,OAAOlB,EAAKkB,QAAO,SAAAW,GAAE,OAAIA,EAAGF,aAC9B,IAAK,cACH,OAAO3B,EAAKkB,QAAO,SAAAW,GAAE,OAAKA,EAAGF,aAC/B,QACE,OAAO3B,GAaK8B,CAAWZ,GACvBL,WAAY,SAACU,GAAD,OACV,cAAC,IAAKR,KAAN,CACER,QAAS,kBA/BEkB,EA+BgBF,EAAEE,GA9BrCvB,EAAS,CAAEI,KAAME,IAAOuB,YAAarB,QAAS,SAC9CR,EAAS,CAAEI,KAAME,IAAOuB,YAAarB,QAASe,IAF5B,IAACA,GAgCXO,MAAO,CAAEC,MAAOV,EAAEI,UAAY,MAAQ,QAASO,OAAQ,WAFzD,SAGEX,EAAEG,UAGR,eAAC,IAAMS,MAAP,CACEC,aAAclB,EACdmB,SAlCgB,SAACC,GACrB,IAAMpB,EAASoB,EAAEC,OAAOC,MACxBtC,EAAS,CAAEI,KAAME,IAAOiC,mBAAoB/B,QAASQ,KAiCjDwB,YAAY,QAHd,UAKE,cAAC,IAAMC,OAAP,CAAcH,MAAM,WAApB,sBACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,iBAApB,4BACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,cAApB,kCChDOI,UATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD","file":"static/js/22.4a9a0ddc.chunk.js","sourcesContent":["import { Button, List } from 'antd'\nimport { connect, DispatchProp } from 'react-redux'\nimport { State } from '../store'\nimport { ACTION, Action } from '../store/actions'\n\ninterface LoadDataProps extends ReturnType<typeof mapstate>, DispatchProp<Action> { }\n\nfunction LoadData(props: LoadDataProps) {\n  const { music: { data, pending }, dispatch } = props\n  const onLoadClick = () => {\n    dispatch({ type: ACTION.FETCH_DATA, payload: 'music' })\n  }\n  return (\n    <div>\n      <Button\n        loading={pending}\n        size=\"large\"\n        danger\n        type=\"primary\"\n        onClick={onLoadClick}\n      >LOAD DATA</Button>\n      <List\n        bordered\n        dataSource={data}\n        renderItem={item => <List.Item>{item}</List.Item>}\n      />\n    </div>\n  )\n}\n\nconst mapstate = (state: State) => ({\n  music: state.music\n})\n\nexport default connect(mapstate)(LoadData)","import { Input, List, Radio } from 'antd'\nimport { connect, DispatchProp } from 'react-redux'\nimport { State } from '../store';\nimport { Action, ACTION } from '../store/actions';\nimport { RadioChangeEvent } from 'antd/lib/radio';\nimport { TodoFilter } from '../store/todo';\n\nlet todoId = 0\ninterface TodoProps extends ReturnType<typeof mapstate>, DispatchProp<Action> { }\n\nfunction Todo(props: TodoProps) {\n  const { todo: { data, filter }, dispatch } = props\n  const onSearch = (v: string) => {\n    if (!v.trim()) return\n    const todo = { id: todoId++, text: v, completed: false }\n    dispatch({ type: ACTION.ADD_TODO, payload: todo })\n  }\n  const onTodoClick = (id: number) => {\n    dispatch({ type: ACTION.TOGGLE_TODO, payload: 2 })\n    dispatch({ type: ACTION.TOGGLE_TODO, payload: id })\n  }\n  const onRadioChange = (e: RadioChangeEvent) => {\n    const filter = e.target.value\n    dispatch({ type: ACTION.SWITCH_TODO_FILTER, payload: filter })\n  }\n  const filterTodo = (filter: TodoFilter) => {\n    switch (filter) {\n      case 'SHOW_COMPLETED':\n        return data.filter(td => td.completed)\n      case 'SHOW_ACTIVE':\n        return data.filter(td => !td.completed)\n      default:\n        return data\n    }\n  }\n  return (\n    <div>\n      <Input.Search\n        placeholder=\"input todo\"\n        enterButton=\"Add Todo\"\n        size=\"large\"\n        onSearch={onSearch}\n      />\n      <List\n        bordered\n        dataSource={filterTodo(filter)}\n        renderItem={(v) =>\n          <List.Item\n            onClick={() => onTodoClick(v.id)}\n            style={{ color: v.completed ? 'red' : 'green', cursor: 'pointer' }}\n          >{v.text}</List.Item>\n        }\n      />\n      <Radio.Group\n        defaultValue={filter}\n        onChange={onRadioChange}\n        buttonStyle=\"solid\"\n      >\n        <Radio.Button value=\"SHOW_ALL\">SHOW_ALL</Radio.Button>\n        <Radio.Button value=\"SHOW_COMPLETED\">SHOW_COMPLETED</Radio.Button>\n        <Radio.Button value=\"SHOW_ACTIVE\">SHOW_ACTIVE</Radio.Button>\n      </Radio.Group>\n    </div>\n  )\n}\n\nconst mapstate = (state: State) => ({\n  todo: state.todo\n})\n\nexport default connect(mapstate)(Todo)","import LoadData from \"./LoadData\"\nimport Todo from \"./Todo\"\n\nfunction Reduxd() {\n  return (\n    <div>\n      <Todo />\n      <LoadData />\n    </div>\n  )\n}\n\nexport default Reduxd"],"sourceRoot":""}