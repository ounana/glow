{"version":3,"sources":["Router.tsx","store/todo.ts","store/music.ts","store/paperStore.ts","store/index.ts","App.tsx","reportWebVitals.ts","index.tsx","store/actions.ts"],"names":["DraftPlan","lazy","Tensorflow","Test","Reduxd","Paperd","Rxjsd","Game","DuckShooter","G6Graphic","Router","fallback","exact","path","component","from","to","initTodo","data","filter","initMusic","pending","loadData","params","setTimeout","a","fetch","process","then","res","json","response","store","dispatch","type","ACTION","FETCH_DATA_SUCCESS","payload","console","log","FETCH_DATA_FAIL","initPaperStore","rootState","combineReducers","todo","state","action","ADD_TODO","TOGGLE_TODO","map","id","completed","SWITCH_TODO_FILTER","music","FETCH_DATA","paperStore","ADD_PAPER_PATH","REMOVE_PAPER_PATH","p","TOGGLE_PAPER_PATH","visible","createStore","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ff8aa1e.chunk.js","sourcesContent":["import { lazy, Suspense } from 'react';\nimport {\n  Route,\n  Switch,\n  Redirect,\n  HashRouter\n} from \"react-router-dom\"\n\nconst DraftPlan = lazy(() => import('./draftplan/DraftPlan'))\nconst Tensorflow = lazy(() => import('./tensorflow'))\nconst Test = lazy(() => import('./test/Test'))\nconst Reduxd = lazy(() => import('./reduxd'))\nconst Paperd = lazy(() => import('./paperd'))\nconst Rxjsd = lazy(() => import('./rxjsd'))\nconst Game = lazy(() => import('./game'))\nconst DuckShooter = lazy(() => import('./duckshooter'))\nconst G6Graphic = lazy(() => import('./g6/G6Graphic'))\n\nexport default function Router() {\n  return (\n    <HashRouter>\n      <Suspense fallback={'路由加载中'}>\n        <Switch>\n          <Route exact path={\"/\"} component={DraftPlan} />\n          <Route path={\"/tensorflow\"} component={Tensorflow} />\n          <Route path=\"/test\" component={Test} />\n          <Route path=\"/reduxd\" component={Reduxd} />\n          <Route path=\"/paperd\" component={Paperd} />\n          <Route path=\"/rxjsd\" component={Rxjsd} />\n          <Route path=\"/game\" component={Game} />\n          <Route path=\"/duckshooter\" component={DuckShooter} />\n          <Route path=\"/g6\" component={G6Graphic} />\n          \n          <Redirect from=\"*\" to=\"/tensorflow\"></Redirect>\n        </Switch>\n      </Suspense>\n    </HashRouter>\n  )\n}","import { Action, ACTION } from './actions'\n\nexport interface TodoData {\n  id: number\n  text: string\n  completed: boolean\n}\nexport type TodoFilter = 'SHOW_ALL' | 'SHOW_COMPLETED' | 'SHOW_ACTIVE'\nexport interface Todo {\n  data: TodoData[]\n  filter: TodoFilter\n}\nconst initTodo: Todo = {\n  data: [],\n  filter: 'SHOW_ALL'\n}\n\nexport function todo(state = initTodo, action: Action): Todo {\n  switch (action.type) {\n    case ACTION.ADD_TODO:\n      return { ...state, data: [...state.data, action.payload] }\n    case ACTION.TOGGLE_TODO:\n      return {\n        ...state, data: state.data.map(todo =>\n          todo.id === action.payload ? { ...todo, completed: !todo.completed } : todo\n        )\n      }\n    case ACTION.SWITCH_TODO_FILTER:\n      return { ...state, filter: action.payload }\n    default:\n      return state\n  }\n}","import store from '.'\nimport { Action, ACTION } from './actions'\n\nexport type Music = {\n  pending: boolean\n  data: string[]\n}\n\nconst initMusic: Music = { pending: false, data: [] }\nexport function music(state = initMusic, action: Action): Music {\n  switch (action.type) {\n    case ACTION.FETCH_DATA_SUCCESS:\n      return { ...state, pending: false, data: action.payload }\n    case ACTION.FETCH_DATA_FAIL:\n      return { ...state, pending: false }\n    case ACTION.FETCH_DATA:\n      loadData(action.payload)\n      return { ...state, pending: true }\n    default:\n      return state\n  }\n}\n\nexport function loadData(params: string) {\n  /* Simulate an asynchronous wait */\n  setTimeout(async () => {\n    try {\n      const response = await fetch(\n        process.env.REACT_APP_BASE_URL + '/data.json'\n      ).then(res => res.json())\n      store.dispatch({\n        type: ACTION.FETCH_DATA_SUCCESS,\n        payload: response[params]\n      })\n    } catch (err) {\n      console.log(err)\n      store.dispatch({ type: ACTION.FETCH_DATA_FAIL })\n    }\n  }, 1000)\n}","import { Action, ACTION } from './actions';\n\nexport type PaperStore = {\n  path: PaperPath[]\n}\n\nexport interface PaperPath {\n  id: number,\n  visible: boolean\n}\n\nconst initPaperStore: PaperStore = {\n  path: []\n}\n\nexport function paperStore(state = initPaperStore, action: Action): PaperStore {\n  switch (action.type) {\n    case ACTION.ADD_PAPER_PATH:\n      return { ...state, path: [...state.path, action.payload] }\n    case ACTION.REMOVE_PAPER_PATH:\n      return { ...state, path: state.path.filter(p => p.id !== action.payload) }\n    case ACTION.TOGGLE_PAPER_PATH:\n      return {\n        ...state, path: state.path.map(p =>\n          p.id === action.payload ? { ...p, visible: !p.visible } : p\n        )\n      }\n    default:\n      return state\n  }\n}","import { combineReducers } from 'redux'\nimport { createStore } from 'redux'\nimport { todo, Todo } from './todo'\nimport { Music, music } from './music'\nimport { Action } from './actions'\nimport { PaperStore, paperStore } from './paperStore'\n\nconst rootState = combineReducers<State, Action>({\n  todo,\n  music,\n  paperStore\n})\n\nexport type State = {\n  todo: Todo,\n  music: Music,\n  paperStore: PaperStore\n}\n\nconst store = createStore(rootState)\nexport default store","import Router from './Router'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Router />\n    </Provider>\n  )\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { PaperPath } from \"./paperStore\";\nimport { TodoData, TodoFilter } from \"./todo\";\n\nexport enum ACTION {\n  /**\n   * load music\n   */\n  FETCH_DATA = 'FETCH_DATA',\n  FETCH_DATA_SUCCESS = 'FETCH_DATA_SUCCESS',\n  FETCH_DATA_FAIL = 'FETCH_DATA_FAIL',\n\n  /**\n   * todo\n   */\n  ADD_TODO = 'ADD_TODO',\n  TOGGLE_TODO = 'TOGGLE_TODO',\n  SWITCH_TODO_FILTER = 'SWITCH_TODO_FILTER',\n\n  /**\n   * paper\n   */\n\n  ADD_PAPER_PATH = 'ADD_PAPER_PATH',\n  REMOVE_PAPER_PATH = 'REMOVE_PATH',\n  TOGGLE_PAPER_PATH = 'TOGGLE_PATH'\n}\n\n\nexport type Action =\n  { type: ACTION.FETCH_DATA, payload: string } |\n  { type: ACTION.FETCH_DATA_SUCCESS, payload: string[] } |\n  { type: ACTION.FETCH_DATA_FAIL } |\n\n  { type: ACTION.ADD_TODO, payload: TodoData } |\n  { type: ACTION.TOGGLE_TODO, payload: number } |\n  { type: ACTION.SWITCH_TODO_FILTER, payload: TodoFilter } |\n\n  { type: ACTION.ADD_PAPER_PATH, payload: PaperPath } |\n  { type: ACTION.REMOVE_PAPER_PATH, payload: number } |\n  { type: ACTION.TOGGLE_PAPER_PATH, payload: number }\n"],"sourceRoot":""}