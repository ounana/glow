{"version":3,"sources":["g6/registerG6.ts","g6/G6Graphic.tsx"],"names":["nodeDefault","G6","registerNode","draw","cfg","group","size","Array","isArray","Error","g","addGroup","fanIn","addShape","attrs","fill","stroke","width","height","x","y","name","draggable","text","textAlign","textBaseline","fontSize","shapeAttrs","r","points","linkPoints","forEach","p","getLinkPoints","hide","setState","value","item","getContainer","get","show","registerBehavior","getDefaultCfg","multiple","getEvents","onItemClick","e","graph","this","removeState","hasState","setItemState","onCanvasClick","findAllByState","node","edge","onClick","ev","point","nodeModel","getModel","addingEdge","source","getSource","id","getEdges","filter","target","map","getID","getTarget","find","updateItem","emit","addItem","onMousemove","onEdgeClick","currentEdge","removeItem","G6Graphic","nodeRef","React","createRef","getContextMenu","Menu","getContent","handleMenuClick","console","log","offsetX","offsetY","itemTypes","renderGraph","current","scrollWidth","scrollHeight","grid","Grid","contextMenu","Graph","plugins","container","modes","default","defaultNode","anchorPoints","edgeStateStyles","selected","defaultEdge","type","style","endArrow","lineAppendWidth","offset","layout","ranksep","render","resizeGraph","on","originalEvent","preventDefault","remove","concat","i","gridCon","document","querySelector","left","top","fitCenter","evt","Date","now","toString","getPointByClient","clientX","clientY","ref","position","border","PureComponent"],"mappings":"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","file":"static/js/21.e9e3d1c5.chunk.js","sourcesContent":["import G6, { Graph, IG6GraphEvent, INode, IGroup } from '@antv/g6'\nimport { ShapeAttrs } from '@antv/g-base'\n\nconst nodeDefault = {\n  stateStroke: 'red',\n  stroke: '#444'\n}\n\nfunction getLinkPoints(width: number, height: number, group: IGroup): IGroup {\n  const shapeAttrs: ShapeAttrs = { r: 4, stroke: nodeDefault.stateStroke, fill: 'white' }\n  const points = [\n    [0, - height / 2],\n    [0, height / 2],\n    [-width / 2, 0],\n    [width / 2, 0]\n  ]\n  const linkPoints = group.addGroup()\n  points.forEach(p => {\n    linkPoints.addShape('circle', {\n      attrs: { x: p[0], y: p[1], ...shapeAttrs }\n    })\n  })\n  return linkPoints\n}\n\nG6.registerNode('irect', {\n  draw: (cfg, group) => {\n    const { size } = cfg!\n    if (!Array.isArray(size)) throw new Error('size 不存在')\n    const g = group!.addGroup()\n    const fanIn = g.addShape('rect', {\n      attrs: {\n        fill: 'white',\n        stroke: nodeDefault.stroke,\n        width: size[0],\n        height: size[1],\n        x: -size[0] / 2,\n        y: -size[1] / 2\n      },\n      name: 'irect-box',\n      draggable: true\n    })\n    g.addShape('text', {\n      attrs: {\n        fill: nodeDefault.stroke,\n        x: 0,\n        y: 0,\n        text: '测试',\n        textAlign: 'center',\n        textBaseline: 'middle',\n        fontSize: 16\n      },\n      name: 'irect-text',\n      draggable: true\n    })\n    const linkPointShapes = getLinkPoints(size[0], size[1], group!)\n    linkPointShapes.hide()\n    return fanIn\n  },\n  setState(name, value, item) {\n    const group = item!.getContainer()\n    const linkPoints: IGroup = group.get('children')[1]\n    if (name === 'selected') {\n      if (value) {\n        linkPoints.show()\n      } else {\n        linkPoints.hide()\n      }\n    }\n  }\n})\n\nG6.registerBehavior('select-item', {\n  getDefaultCfg() {\n    return {\n      multiple: false\n    };\n  },\n  getEvents() {\n    return {\n      'edge:click': 'onItemClick',\n      'node:click': 'onItemClick',\n      'canvas:click': 'onCanvasClick'\n    }\n  },\n  onItemClick(e: IG6GraphEvent) {\n    const graph: Graph = this.graph as any\n    const item = e.item!;\n    //清空掉所有item的选中状态\n    (this as any).removeState()\n    if (item.hasState('selected')) {\n      graph.setItemState(item, 'selected', false);\n      return;\n    }\n    // 置点击的item状态 'selected' 为 true\n    graph.setItemState(item, 'selected', true);\n  },\n  onCanvasClick(e: any) {\n    (this as any).removeState()\n  },\n  removeState() {\n    const graph: Graph = this.graph as any\n    graph.findAllByState('node', 'selected').forEach(node => {\n      graph.setItemState(node, 'selected', false)\n    })\n    graph.findAllByState('edge', 'selected').forEach(edge => {\n      graph.setItemState(edge, 'selected', false)\n    })\n  }\n})\n\ninterface RegisterBehaviorThis {\n  graph: Graph\n  edge: any | null\n  addingEdge: boolean\n}\n\nG6.registerBehavior('click-add-edge', {\n  getEvents() {\n    return {\n      'node:click': 'onClick',\n      'mousemove': 'onMousemove',\n      'edge:click': 'onEdgeClick',\n    };\n  },\n  onClick(this: RegisterBehaviorThis, ev: IG6GraphEvent) {\n    const node = ev.item as INode\n    const graph = this.graph\n    // 鼠标当前点击的节点的位置\n    const point = { x: ev.x, y: ev.y }\n    const nodeModel = node.getModel()\n    if (this.addingEdge && this.edge) {\n      //结束逻辑\n      const source = this.edge.getSource().getModel()\n      //首位相同的线排除\n      if (source.id === nodeModel.id) {\n        return\n      }\n      //重叠的线 排除\n      const iscoin = graph.getEdges().filter(e => typeof e.getModel().target === 'string')\n        .map(e => e.getSource().getID() + e.getTarget().getID())\n        .find(x => x === source.id + nodeModel.id)\n      if (iscoin) {\n        return\n      }\n      graph.updateItem(this.edge, {\n        target: nodeModel.id\n      })\n      graph.emit('aftercreateedge', this.edge)\n      this.edge = null\n      this.addingEdge = false\n    } else {\n      //起点\n      // 在图上新增一条边，结束点是鼠标当前点击的节点的位置\n      this.edge = graph.addItem('edge', {\n        // id: v4(),\n        source: nodeModel.id,\n        target: point\n      })\n      this.addingEdge = true\n    }\n  },\n  onMousemove(this: RegisterBehaviorThis, ev: IG6GraphEvent) {\n    const graph = this.graph\n    // 鼠标的当前位置\n    const point = { x: ev.x, y: ev.y }\n    if (this.addingEdge && this.edge) {\n      // 更新边的结束点位置为当前鼠标位置\n      graph.updateItem(this.edge, {\n        target: point,\n      })\n    }\n  },\n  onEdgeClick(this: RegisterBehaviorThis, ev: IG6GraphEvent) {\n    const currentEdge = ev.item;\n    // 拖拽过程中，点击会点击到新增的边上\n    if (this.addingEdge && this.edge === currentEdge) {\n      this.graph.removeItem(this.edge);\n      this.edge = null;\n      this.addingEdge = false;\n    }\n  },\n})\n","import React, { PureComponent } from 'react';\nimport G6, { Graph, IG6GraphEvent } from '@antv/g6'\nimport './registerG6'\n\nexport default class G6Graphic extends PureComponent {\n  nodeRef = React.createRef<HTMLDivElement>()\n  graph: Graph | null = null\n  getContextMenu = () => new G6.Menu({\n    getContent(graph: any) {\n      return `<ul>\n        <li>修改01</li>\n        <li>测试02</li>\n      </ul>`;\n    },\n    handleMenuClick: (target: any, item: any) => {\n      console.log(target, item);\n    },\n    offsetX: 0,\n    offsetY: 0,\n    itemTypes: ['node']\n  })\n\n  componentDidMount() {\n    this.renderGraph()\n  }\n\n  fitCenter() {\n    this.graph!.layout()\n    this.graph!.fitCenter()\n  }\n\n  renderGraph = () => {\n    const node = this.nodeRef.current!\n    const [width, height] = [node.scrollWidth, node.scrollHeight]\n    const grid = new G6.Grid()\n    const contextMenu = this.getContextMenu()\n    this.graph = new G6.Graph({\n      plugins: [grid, contextMenu],\n      container: node,\n      width, height,\n      modes: {\n        default: [\n          'drag-node',\n          'select-item',\n          'drag-canvas',\n          'click-add-edge'\n        ],\n      },\n      defaultNode: {\n        anchorPoints: [\n          [0.5, 0], [1, 0.5], [0.5, 1], [0, 0.5], [0.5, 0]\n        ]\n      },\n      edgeStateStyles: {\n        selected: {\n          stroke: 'red'\n        }\n      },\n      defaultEdge: {\n        type: 'polyline',\n        size: 2,\n        style: {\n          stroke: '#000',\n          endArrow: true,\n          lineAppendWidth: 8,\n          offset: 20\n        }\n      },\n      layout: {\n        type: 'dagre',\n        ranksep: 25\n      }\n    })\n\n    this.graph.render()\n    this.resizeGraph()\n    this.graph.on('contextmenu', (e) => {\n      e.originalEvent.preventDefault()\n    })\n    this.graph.on('canvas:click', this.onCanvasClick)\n  }\n\n  onCanvasClick(this: Graph, evt: IG6GraphEvent) {\n    const id = 'node-' + Date.now().toString()\n    const { x, y } = this.getPointByClient(evt.clientX, evt.clientY)\n    this.addItem('node', {\n      id, x, y, type: 'irect', size: [100, 50]\n    })\n  }\n\n  remove = () => {\n    if (!this.graph) return\n    const selecteds = this.graph.findAllByState('edge', 'selected')\n      .concat(this.graph.findAllByState('node', 'selected'))\n    //线删除线 再删除节点\n    selecteds.forEach(i => {\n      this.graph!.removeItem(i.getID())\n    })\n  }\n\n  resizeGraph = () => {\n    const gridCon = document.querySelector<HTMLDivElement>('.g6-grid-container')\n    if (gridCon) {\n      gridCon.style.left = '0px'\n      gridCon.style.top = '0px'\n    }\n  }\n\n  render() {\n    return (\n      <div ref={this.nodeRef}\n        style={{\n          width: '800px', height: '600px', position: 'relative',\n          border: '1px solid'\n        }}\n      />\n    )\n  }\n}\n"],"sourceRoot":""}